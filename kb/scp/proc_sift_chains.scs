scp_program -> proc_sift_chains (*	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _graph;;
		-> rrel_1: rrel_in: _neccessary_length;;
	*);;

	-> rrel_operators: ... (*

		//Создание множества всех цепей, принадлежащих графу
		//Если множество непустое, то находим первую цепь
		//Если множество пустое, то выходим из программы
		-> rrel_init: ..proc_sift_chains_create_all_chains (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex_1;;
			-> rrel_4: rrel_assign: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_pos_const_perm: rrel_scp_const: rrel_chain;;
			->rrel_set_3: rrel_assign: rrel_scp_var: _all_chains;;
			=> nrel_then: ..proc_sift_chains_get_chain;;		
			=> nrel_else: ..proc_sift_chains_print;;	
		*);;

		//Поиск цепи во множестве всех цепей
		//Если цепь найдена, то удаляем дугу между этой цепью и множество всех цепей
		//Если цепь не найдена, то удаляем множесто _all_chains
		-> ..proc_sift_chains_get_chain (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _all_chains;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _deleted_arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _chain;;
			=> nrel_then: ..proc_sift_chains_delete_arc;;
			=> nrel_else: ..proc_sift_chains_clear;;
		*);;

		//Удаление множества всех вершин
		//Переход к return
		-> ..proc_sift_chains_clear (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _all_chains;;
			=> nrel_goto: ..proc_sift_chains_print;;	
		*);;

		//Вывод сообщения
		//После этого выходим из программы
		-> ..proc_sift_chains_print (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Проверка завершена];; 		
			=> nrel_goto: ..proc_sift_chains_return;;	
		*);;

		//Удаление дуги между цепью и множеством всех цепей
		//Переход к вызову функции proc_length, которая вычисляет длину цепи _chain
		-> ..proc_sift_chains_delete_arc (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_arc;;
			=> nrel_goto: ..proc_sift_chains_get_length;;	
		*);;

		//Вызов программы proc_length
		-> ..proc_sift_chains_get_length (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_length;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				//Обрабатываемая цепь
				-> rrel_1: rrel_fixed: rrel_scp_const: _chain;;
				//Длина цепи
				-> rrel_2: rrel_assign: rrel_scp_var: _length;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_sift_chains_wait;;
		*);;	
	
		//Ожидание завершения вычисления длины цепи
		//Переход к сравнению
		-> ..proc_sift_chains_wait (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: ..proc_sift_if_equals;; //Поменять на proc_run_test_2!!!!!!!!!!!!!!!!!!
		*);;

		//Сравнение длины цепи и заданной длины
		//Если они равны, то переходим к сравнению следующей цепи
		//Если они не равны, то удаляем _chain и переходим к следующей цепи
		-> ..proc_sift_if_equals (*
			<- ifEq;;
			-> rrel_1: _length;;
			-> rrel_2: _neccessary_length;;
			=> nrel_then: ..proc_sift_chains_get_chain;;
			=> nrel_else: ..proc_sift_if_equals_delete_chain;;
		*);;

		//Удаление цепи _chain и переход к следующей цепи
		-> ..proc_sift_if_equals_delete_chain (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_arc;;
			=> nrel_goto: ..proc_sift_chains_get_chain;;	
		*);;

		//Оператор return
		-> ..proc_sift_chains_return (*
			<- return;;
		*);;

	*);;
*);;
