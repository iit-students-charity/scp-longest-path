// Программа поиска всех цепей заданной длины в ориентированном взвешенном графе
scp_program -> proc_find_chains_by_length (*
	-> rrel_params: ... (*
		// Узел, содержащий исходный граф
		-> rrel_1: rrel_in: _graph;;
		// Начальная вершина
		-> rrel_2: rrel_in: _begin_vertex;;
		// Конечная вершина
		-> rrel_3: rrel_in: _end_vertex;;
		// Номер теста (sc-ссылка)
		-> rrel_4: rrel_in: _test_number;;
	*);;

	-> rrel_operators: ... (*
		// Начальный оператор (выводит строку ---------- Тест )
		// Переход к оператору вывода номера теста
		-> rrel_init: ..start (*
			<- print;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [---------- Тест ];;
			=> nrel_goto: ..print_test_numbers;;
		*);;

		// Оператор вывода номера теста
		// Переход к оператору создания множества непроверенных вершин
		-> ..print_test_numbers (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _test_number;; 		
			=> nrel_goto: ..create_set_not_checked_vertices;;	
		*);;

		// Оператор создания множества всех непроверенных вершин (непроверенными вершинами будут считаться все вершины графа)
		// Если такое множество создано, то переходим к созданию простой цепи, в которую занесем начальную вершину
		// Условие, когда не будет создано множество непроверенных вершин, невыполнимо
		-> ..create_set_not_checked_vertices (*
			 <- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex_of_graph;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_node;;
			-> rrel_set_3: rrel_assign: rrel_scp_var: _not_checked_vertices;;
			=> nrel_then: ..create_simple_chain;;
			=> nrel_else: ..create_max_chain;;	
		*);;

		// Оператор генерации простой цепи
		// После генерации узла, переходим к добавлению начальной вершины
		-> ..create_simple_chain (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _simple_chain;;
			=> nrel_goto: ..add_first_vertex;;
		*);;

		// Оператор добавления начальной вершины в созданную цепь
		// После этого переходим к вызову программы proc_find_all_chains
		-> ..add_first_vertex (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _simple_chain;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _begin_vertex;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_next;;
			=> nrel_goto: ..call_find_all_chains;;
		*);;

		// Оператор вызова программы proc_find_all_chains, которая ищет все простые цепи между вершинами _begin_vertex и _end_vertex
		// После этого переходим к оператору ожидания
		-> ..call_find_all_chains (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_find_all_chains;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// узел графа
				-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
				// Начальная вершина
				-> rrel_2: rrel_fixed: rrel_scp_var: _begin_vertex;;
				// Конечная вершина
				-> rrel_3: rrel_fixed: rrel_scp_var: _end_vertex;;
				// Простая цепь
				-> rrel_4: rrel_fixed: rrel_scp_var: _simple_chain;;
				// Множество непроверенных вершин
				-> rrel_5: rrel_fixed: rrel_scp_var: _not_checked_vertices;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr1;;
			=> nrel_goto: ..wait_find_all_chains;;
		*);;

		// Оператор ожидания завершения программы proc_find_all_chains
		// После этого очистим память
		-> ..wait_find_all_chains (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;
			=> nrel_goto: ..erase_not_checked_vertices;;
		*);;

		// Удаление множества всех непроверенных вершин
		// Переход к созданию узла для максимальной цепи
		-> ..erase_not_checked_vertices (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _not_checked_vertices;;
			=> nrel_goto: ..create_max_chain;;
		*);;

		// Создаём узел для хранения максимальной длины
		-> ..create_max_chain (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _max_chain;;
			=> nrel_goto: ..call_find_max_chain;;
		*);;

		// Оператор вызова proc_find_max_chain
		// Вызванная программа находит максимальную цепь из найденных
		-> ..call_find_max_chain (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_find_max_chain;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// Узел графа
				-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
				// Узел для хранения максимальной длины
				-> rrel_2: rrel_fixed: rrel_scp_var: _max_chain;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr2;;
			=> nrel_goto: ..wait_find_max_chain;;
		*);;

		// Оператор ожидания завершения программы find_max_chain
		// После этого переходим к оператору вызова программы proc_out
		-> ..wait_find_max_chain (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr2;;
			=> nrel_goto: ..call_out;;
		*);;

		// Оператор вызова proc_out
		// Вызванная программа выводит результат выполнения программы
		-> ..call_out (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_out;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// Максимальная цепь
				-> rrel_1: rrel_fixed: rrel_scp_var: _max_chain;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr3;;
			=> nrel_goto: ..wait_out;;
		*);;

		// Оператор ожидания завершения программы proc_out
		// После этого переходим к оператору вызова программы очистки памяти
		-> ..wait_out (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr3;;
			=> nrel_goto: ..call_clear;;
		*);;

		// Оператор вызова proc_clear
		// Вызванная программа очищает память от созданных цепей
		// После этого переходим к оператору ожидания завершения программы
		-> ..call_clear (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_clear;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// Узел графа
				-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr4;;
			=> nrel_goto: ..wait_clear;;
		*);;

		// Оператор ожидания завершения программы proc_out
		// После этого переходим к оператору вызова программы очистки памяти
		-> ..wait_clear (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr4;;
			=> nrel_goto: ..return;;
		*);;

		// Оператор return
		-> ..return (*
			<- return;;
		*);;
	*);;
*);;
