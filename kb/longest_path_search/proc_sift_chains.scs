// Программа удаления цепей, длина которых != заданной длине
scp_program -> proc_sift_chains (*	
	-> rrel_params: ... (*
		// Узел графа
		-> rrel_1: rrel_in: _graph;;
		// Узел для максимальной цепи
		-> rrel_2: rrel_in: _max_chain;;
	*);;

	-> rrel_operators: ... (*
		
		// Инициализация _max_length нулём
		-> rrel_init: ..initialize (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _max_length;;
			-> rrel_2: rrel_fixed: rrel_scp_const: [0];;
			=> nrel_goto: ..create_all_chains;;
		*);;

		// Создание множества всех цепей, принадлежащих графу
		// Если множество непустое, то находим первую цепь
		// Если множество пустое, то выходим из программы
		-> ..create_all_chains (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex_1;;
			-> rrel_4: rrel_assign: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed:  rrel_scp_const: rrel_chain;;
			-> rrel_set_3: rrel_assign: rrel_scp_var: _all_chains;;
			=> nrel_then: ..get_chain;;		
			=> nrel_else: ..return;;	
		*);;

		// ---------------Перебор всех цепей-------------

		// Поиск цепи во множестве всех цепей
		// Если цепь найдена, то удаляем дугу между этой цепью и множеством всех цепей
		// Если цепь не найдена, то удаляем множесто _all_chains и выходим из программы
		-> ..get_chain (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _all_chains;;
			-> rrel_2: rrel_assign: rrel_scp_var: _deleted_arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _chain;;
			=> nrel_then: ..delete_arc;;
			=> nrel_else: ..clear;;
		*);;

		// Удаление дуги между цепью и множеством всех цепей
		// Переход к вызову функции proc_length, которая вычисляет длину цепи _chain (перед этим создадим переменную _length, в которой будем хранить длину цепи _chain)
		-> ..delete_arc (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_arc;;
			=> nrel_goto: ..generate_length;;	
		*);;

		// Оператор создания переменной, хранящей длину цепи
		-> ..generate_length (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _length;;
			=> nrel_goto: ..get_length;;
		*);;

		// Вызов программы proc_length, которая вычисляет длину цепи
		-> ..get_length (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_length;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				// Цепь, длину которой нужно найти
				-> rrel_1: rrel_fixed: rrel_scp_var: _chain;;
				// Длина цепи
				-> rrel_2: rrel_assign: rrel_scp_var: _length;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			=> nrel_goto: ..wait;;
		*);;	
	
		// Ожидание завершения вычисления длины цепи
		// Переход к сравнению
		-> ..wait (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
			=> nrel_goto: ..if_greater;;
		*);;

		// Сравнение длины цепи и максимальной длины
		// Если длина цепи больше максимальной, пеходим к обновлению значения максимальной длины
		// иначе удаляем цепь
		-> ..if_greater (*
			<- ifGr;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _length;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _max_length;;
			=> nrel_then: ..assign_new_max;;
			=> nrel_else: ..delete_chain;;
		*);;

		// _max_length = _length
		-> ..assign_new_max (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _max_length;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _length;;
			=> nrel_goto: ..check_prev_max_chain;;
		*);;

		// Проверка на существование цепи в _max_chain
		// Если есть, удаляем её и переходим к назначению текущей
		// Если нет, сразу переходим к назначению текущей
		-> ..check_prev_max_chain (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _max_chain;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _max_chain_arc;;			
			-> rrel_3: rrel_assign: rrel_scp_var: _prev_max_chain;;
			=> nrel_then: ..delete_prev_max_chain;;
		 	=> nrel_else: ..assign_new_max_chain;;
		*);;

		// Удаляем дугу связывающую предыдущую максимальную цепь с _max_chain
		// Переходим к назначению новой максимальной цепи в _max_chain
		-> ..delete_prev_max_chain (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _max_chain_arc;;
			=> nrel_goto: ..assign_new_max_chain;;
		*);;

		// Заносим новую максимальную цепь в _max_chain
		// Переходим к проверке следующей
		-> ..assign_new_max_chain (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _max_chain;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _max_chain_arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _chain;;
			=> nrel_goto: ..get_chain;;
		*);;

		// Удаление цепи _chain и переход к следующей цепи
		-> ..delete_chain (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _chain;;
			=> nrel_goto: ..get_chain;;	
		*);;
		
		// Удаление множества всех вершин
		// Переход к удалению _max_length
		-> ..clear (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _all_chains;;
			=> nrel_goto: ..return;;	
		*);;

		// Удаление _max_length
		// Переход к return
		-> ..delete_max_length (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _max_length;;
			=> nrel_goto: ..return;;	
		*);;

		// Оператор return
		-> ..return (*
			<- return;;
		*);;
	*);;
*);;
