// Программа вывода всех цепей
scp_program -> proc_out (*	
	-> rrel_params: ... (*
		// Узел максимальной цепи
		-> rrel_1: rrel_in: _max_chain;;
	*);;

	-> rrel_operators: ... (*
		// Ищем максимальную цепь
		// Если нашли, то переходим к перебору её вершин
		// Если не нашли, то выводим информацию о том, что путь не существует
		-> rrel_init: ..get_max_chain (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _max_chain;;
			-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _chain;;
			=> nrel_then: ..get_first_vertex;;		
			=> nrel_else: ..print_not_exists;;
		*);;

		// Оператор вывода ("Путь не существует")
		// Затем выход из программы
		-> ..print_not_exists (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [Путь не существует];;
			=> nrel_goto: ..return;;	
		*);;

		// ----------------Перебор всех вершин цепи----------------------

		// Оператор нахождения первой вершины в цепи
		// Если вершина найдена, то переходим к выводу этой вершины
		// Если вершина не найдена, то переходим к очистке памяти и выходу из программы (Условие невыполнимо)
		-> ..get_first_vertex (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _chain;;
			-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _begin_vertex;;
			-> rrel_4: rrel_assign: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_next;;
			=> nrel_then: ..print_vertex;;
			=> nrel_else: ..clear;;
		*);;

		// Удаление _max_chain
		// Переход к return
		-> ..clear (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _max_chain;;
			=> nrel_goto: ..return;;	
		*);;

		// Поиск идентификатора вершины
		// Переход к оператору печати
		-> ..print_vertex (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _begin_vertex;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _print_value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
			=> nrel_then: ..print_vertex_value;;		
		 	=> nrel_else: ..clear;;
		*);;

		// Оператор вывода первой вершины
		// Переход к нахождению следующей вершины
		->..print_vertex_value (*
			<- print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _print_value;;
			=> nrel_goto: ..get_next_vertex;;
		*);;

		// Оператор нахождения следующей вершины в цепи
		// Если вершина найдена, то переходим к выводу сначала "=>", затем выводу найденной вершины
		// Если вершина не найдена, то переходим к выводу следующей цепи
		-> ..get_next_vertex (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _begin_vertex;;
			-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _next_vertex;;
			-> rrel_4: rrel_assign: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _chain;;
			=> nrel_then: ..print_common_arc;;
			=> nrel_else: ..print_new_line;;
		*);;

		// Оператор вывода ("=>")
		// Переход к выводу следующей вершины
		-> ..print_common_arc (*
			<- print;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [=>];; 		
			=> nrel_goto: ..print_next_vertex;;	
		*);;

		// Поиск идентификатора вершины
		// Переход к оператору печати
		-> ..print_next_vertex (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _next_vertex;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _print_value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
			=> nrel_then: ..print_next_vertex_value;;		
		 	=> nrel_else: ..print_new_line;;
		*);;

		// Оператор вывода вершины
		// Переход к присваиванию следующей вершины текущей (_begin_vertex = _next_vertex)
		->..print_next_vertex_value (*
			<- print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _print_value;;
			=> nrel_goto: ..change_value_of_begin_vertex;;
		*);;

		// _begin_vertex = _next_vertex
		// Переход к оператору получения следующей вершины
		->..change_value_of_begin_vertex (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _begin_vertex;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _next_vertex;;
			=> nrel_goto: ..get_next_vertex;;
		*);;

		// Переход на новую строку
		// После этого переходим к оператору получения следующей цепи
		-> ..print_new_line (*
			<- printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ ];; 		
			=> nrel_goto: ..clear;;	
		*);;

		// Оператор return
		-> ..return (*
			<- return;;
		*);;
	*);;
*);;
